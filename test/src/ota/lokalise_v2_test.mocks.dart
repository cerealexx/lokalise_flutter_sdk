// Mocks generated by Mockito 5.4.4 from annotations
// in lokalise_flutter_sdk/test/src/ota/lokalise_v2_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:lokalise_flutter_sdk/src/ota/domain/dto/get_up_to_date_bundle_dto.dart'
    as _i6;
import 'package:lokalise_flutter_sdk/src/ota/domain/models/bundle.dart' as _i2;
import 'package:lokalise_flutter_sdk/src/ota/domain/services/message_lookup_proxy.dart'
    as _i7;
import 'package:lokalise_flutter_sdk/src/ota/domain/use_cases/get_local_bundle_use_case.dart'
    as _i3;
import 'package:lokalise_flutter_sdk/src/ota/domain/use_cases/get_up_to_date_bundle_use_case.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBundle_0 extends _i1.SmartFake implements _i2.Bundle {
  _FakeBundle_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetLocalBundleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetLocalBundleUseCase extends _i1.Mock
    implements _i3.GetLocalBundleUseCase {
  MockGetLocalBundleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Bundle> getBundle({
    required String? projectId,
    required String? appVersion,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBundle,
          [],
          {
            #projectId: projectId,
            #appVersion: appVersion,
          },
        ),
        returnValue: _i4.Future<_i2.Bundle>.value(_FakeBundle_0(
          this,
          Invocation.method(
            #getBundle,
            [],
            {
              #projectId: projectId,
              #appVersion: appVersion,
            },
          ),
        )),
      ) as _i4.Future<_i2.Bundle>);
}

/// A class which mocks [GetUpToDateBundleUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUpToDateBundleUseCase extends _i1.Mock
    implements _i5.GetUpToDateBundleUseCase {
  MockGetUpToDateBundleUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Bundle> getBundle({required _i6.GetUpToDateBundleDto? dto}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getBundle,
          [],
          {#dto: dto},
        ),
        returnValue: _i4.Future<_i2.Bundle>.value(_FakeBundle_0(
          this,
          Invocation.method(
            #getBundle,
            [],
            {#dto: dto},
          ),
        )),
      ) as _i4.Future<_i2.Bundle>);
}

/// A class which mocks [MessageLookupProxy].
///
/// See the documentation for Mockito's code generation for more information.
class MockMessageLookupProxy extends _i1.Mock
    implements _i7.MessageLookupProxy {
  MockMessageLookupProxy() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get translationVersion => (super.noSuchMethod(
        Invocation.getter(#translationVersion),
        returnValue: 0,
      ) as int);

  @override
  set bundle(_i2.Bundle? bundle) => super.noSuchMethod(
        Invocation.setter(
          #bundle,
          bundle,
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addArgNamesByKeyName(Map<String, List<String>>? param) =>
      super.noSuchMethod(
        Invocation.method(
          #addArgNamesByKeyName,
          [param],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addLocale(
    String? localeName,
    Function? findLocale,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #addLocale,
          [
            localeName,
            findLocale,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
